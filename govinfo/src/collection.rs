use std::fmt::Display;

use crate::Error;

#[derive(Debug)]
pub enum Collection {
    Bills,
    BillStatus,
    Budget,
    Ccal,
    Cdir,
    Cdoc,
    Cfr,
    Chrg,
    Cmr,
    Comps,
    Cpd,
    Cprt,
    Crec,
    Crecb,
    Cri,
    Crpt,
    Czic,
    Ecfr,
    Econi,
    Eric,
    Erp,
    Fr,
    GaoReports,
    GovMan,
    GovPub,
    Gpo,
    HJournal,
    HMan,
    Hob,
    Lsa,
    Pai,
    Plaw,
    Ppp,
    SerialSet,
    SJournal,
    SMan,
    Statute,
    UsCode,
    UsCourts,
}

impl TryFrom<&str> for Collection {
    type Error = Error;

    fn try_from(value: &str) -> Result<Self, Self::Error> {
        let collection = value.to_uppercase();

        match collection.as_ref() {
            "BILLS" => Ok(Collection::Bills),
            "BILLSTATUS" => Ok(Collection::BillStatus),
            "BUDGET" => Ok(Collection::Budget),
            "CCAL" => Ok(Collection::Ccal),
            "CDIR" => Ok(Collection::Cdir),
            "CDOC" => Ok(Collection::Cdoc),
            "CFR" => Ok(Collection::Cfr),
            "CHRG" => Ok(Collection::Chrg),
            "CMR" => Ok(Collection::Cmr),
            "COMPS" => Ok(Collection::Comps),
            "CPD" => Ok(Collection::Cpd),
            "CPRT" => Ok(Collection::Cprt),
            "CREC" => Ok(Collection::Crec),
            "CRECB" => Ok(Collection::Crecb),
            "CRI" => Ok(Collection::Cri),
            "CRPT" => Ok(Collection::Crpt),
            "CZIC" => Ok(Collection::Czic),
            "ECFR" => Ok(Collection::Ecfr),
            "ECONI" => Ok(Collection::Econi),
            "ERIC" => Ok(Collection::Eric),
            "ERP" => Ok(Collection::Erp),
            "FR" => Ok(Collection::Fr),
            "GAOREPORTS" => Ok(Collection::GaoReports),
            "GOVMAN" => Ok(Collection::GovMan),
            "GOVPUB" => Ok(Collection::GovPub),
            "GPO" => Ok(Collection::Gpo),
            "HJOURNAL" => Ok(Collection::HJournal),
            "HMAN" => Ok(Collection::HMan),
            "HOB" => Ok(Collection::Hob),
            "LSA" => Ok(Collection::Lsa),
            "PAI" => Ok(Collection::Pai),
            "PLAW" => Ok(Collection::Plaw),
            "PPP" => Ok(Collection::Ppp),
            "SERIALSET" => Ok(Collection::SerialSet),
            "SJOURNAL" => Ok(Collection::SJournal),
            "SMAN" => Ok(Collection::SMan),
            "STATUTE" => Ok(Collection::Statute),
            "USCODE" => Ok(Collection::UsCode),
            "USCOURTS" => Ok(Collection::UsCourts),
            other => Err(Error::InvalidCollectionParam(other.to_string())),
        }
    }
}

impl Display for Collection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Collection::Bills => write!(f, "BILLS"),
            Collection::BillStatus => write!(f, "BILLSTATUS"),
            Collection::Budget => write!(f, "BUDGET"),
            Collection::Ccal => write!(f, "CCAL"),
            Collection::Cdir => write!(f, "CDIR"),
            Collection::Cdoc => write!(f, "CDOC"),
            Collection::Cfr => write!(f, "CFR"),
            Collection::Chrg => write!(f, "CHRG"),
            Collection::Cmr => write!(f, "CMR"),
            Collection::Comps => write!(f, "COMPS"),
            Collection::Cpd => write!(f, "CPD"),
            Collection::Cprt => write!(f, "CPRT"),
            Collection::Crec => write!(f, "CREC"),
            Collection::Crecb => write!(f, "CRECB"),
            Collection::Cri => write!(f, "CRI"),
            Collection::Crpt => write!(f, "CRPT"),
            Collection::Czic => write!(f, "CZIC"),
            Collection::Ecfr => write!(f, "ECFR"),
            Collection::Econi => write!(f, "ECONI"),
            Collection::Eric => write!(f, "ERIC"),
            Collection::Erp => write!(f, "ERP"),
            Collection::Fr => write!(f, "FR"),
            Collection::GaoReports => write!(f, "GAOREPORTS"),
            Collection::GovMan => write!(f, "GOVMAN"),
            Collection::GovPub => write!(f, "GOVPUB"),
            Collection::Gpo => write!(f, "GPO"),
            Collection::HJournal => write!(f, "HJOURNAL"),
            Collection::HMan => write!(f, "HMAN"),
            Collection::Hob => write!(f, "HOB"),
            Collection::Lsa => write!(f, "LSA"),
            Collection::Pai => write!(f, "PAI"),
            Collection::Plaw => write!(f, "PLAW"),
            Collection::Ppp => write!(f, "PPP"),
            Collection::SerialSet => write!(f, "SERIALSET"),
            Collection::SJournal => write!(f, "SJOURNAL"),
            Collection::SMan => write!(f, "SMAN"),
            Collection::Statute => write!(f, "STATUTE"),
            Collection::UsCode => write!(f, "USCODE"),
            Collection::UsCourts => write!(f, "USCOURTS"),
        }
    }
}
